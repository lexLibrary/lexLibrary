// Code generated by go-bindata. DO NOT EDIT.
// sources:
// version
// client/deploy/about.template.html
// client/deploy/admin.template.html
// client/deploy/css/lex.css
// client/deploy/css/mixins/blur.css
// client/deploy/error.template.html
// client/deploy/first_run.template.html
// client/deploy/images/favicon.png
// client/deploy/index.template.html
// client/deploy/js/about.js
// client/deploy/js/admin.js
// client/deploy/js/first_run.js
// client/deploy/js/index.js
// client/deploy/js/login.js
// client/deploy/js/profile.js
// client/deploy/js/profile_edit.js
// client/deploy/js/signup.js
// client/deploy/js/vue.js
// client/deploy/login.template.html
// client/deploy/not_found.template.html
// client/deploy/partials/header.template.html
// client/deploy/partials/nav.template.html
// client/deploy/profile.template.html
// client/deploy/profile_edit.template.html
// client/deploy/signup.template.html
// app/bad_passwords.txt

package files

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// version reads file data from disk. It returns an error on failure.
func version() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/version"
	name := "version"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// aboutTemplateHtml reads file data from disk. It returns an error on failure.
func aboutTemplateHtml() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/about.template.html"
	name := "about.template.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// adminTemplateHtml reads file data from disk. It returns an error on failure.
func adminTemplateHtml() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/admin.template.html"
	name := "admin.template.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// cssLexCss reads file data from disk. It returns an error on failure.
func cssLexCss() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/css/lex.css"
	name := "css/lex.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// cssMixinsBlurCss reads file data from disk. It returns an error on failure.
func cssMixinsBlurCss() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/css/mixins/blur.css"
	name := "css/mixins/blur.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// errorTemplateHtml reads file data from disk. It returns an error on failure.
func errorTemplateHtml() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/error.template.html"
	name := "error.template.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// first_runTemplateHtml reads file data from disk. It returns an error on failure.
func first_runTemplateHtml() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/first_run.template.html"
	name := "first_run.template.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imagesFaviconPng reads file data from disk. It returns an error on failure.
func imagesFaviconPng() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/images/favicon.png"
	name := "images/favicon.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// indexTemplateHtml reads file data from disk. It returns an error on failure.
func indexTemplateHtml() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/index.template.html"
	name := "index.template.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsAboutJs reads file data from disk. It returns an error on failure.
func jsAboutJs() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/js/about.js"
	name := "js/about.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsAdminJs reads file data from disk. It returns an error on failure.
func jsAdminJs() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/js/admin.js"
	name := "js/admin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsFirst_runJs reads file data from disk. It returns an error on failure.
func jsFirst_runJs() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/js/first_run.js"
	name := "js/first_run.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsIndexJs reads file data from disk. It returns an error on failure.
func jsIndexJs() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/js/index.js"
	name := "js/index.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsLoginJs reads file data from disk. It returns an error on failure.
func jsLoginJs() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/js/login.js"
	name := "js/login.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsProfileJs reads file data from disk. It returns an error on failure.
func jsProfileJs() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/js/profile.js"
	name := "js/profile.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsProfile_editJs reads file data from disk. It returns an error on failure.
func jsProfile_editJs() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/js/profile_edit.js"
	name := "js/profile_edit.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsSignupJs reads file data from disk. It returns an error on failure.
func jsSignupJs() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/js/signup.js"
	name := "js/signup.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsVueJs reads file data from disk. It returns an error on failure.
func jsVueJs() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/js/vue.js"
	name := "js/vue.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// loginTemplateHtml reads file data from disk. It returns an error on failure.
func loginTemplateHtml() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/login.template.html"
	name := "login.template.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// not_foundTemplateHtml reads file data from disk. It returns an error on failure.
func not_foundTemplateHtml() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/not_found.template.html"
	name := "not_found.template.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// partialsHeaderTemplateHtml reads file data from disk. It returns an error on failure.
func partialsHeaderTemplateHtml() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/partials/header.template.html"
	name := "partials/header.template.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// partialsNavTemplateHtml reads file data from disk. It returns an error on failure.
func partialsNavTemplateHtml() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/partials/nav.template.html"
	name := "partials/nav.template.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// profileTemplateHtml reads file data from disk. It returns an error on failure.
func profileTemplateHtml() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/profile.template.html"
	name := "profile.template.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// profile_editTemplateHtml reads file data from disk. It returns an error on failure.
func profile_editTemplateHtml() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/profile_edit.template.html"
	name := "profile_edit.template.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// signupTemplateHtml reads file data from disk. It returns an error on failure.
func signupTemplateHtml() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/client/deploy/signup.template.html"
	name := "signup.template.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appBad_passwordsTxt reads file data from disk. It returns an error on failure.
func appBad_passwordsTxt() (*asset, error) {
	path := "/home/tshannon/workspace/go/src/github.com/lexLibrary/lexLibrary/app/bad_passwords.txt"
	name := "app/bad_passwords.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// AssetNames returns the names of the assets.
// nolint: deadcode
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"version":                       version,
	"about.template.html":           aboutTemplateHtml,
	"admin.template.html":           adminTemplateHtml,
	"css/lex.css":                   cssLexCss,
	"css/mixins/blur.css":           cssMixinsBlurCss,
	"error.template.html":           errorTemplateHtml,
	"first_run.template.html":       first_runTemplateHtml,
	"images/favicon.png":            imagesFaviconPng,
	"index.template.html":           indexTemplateHtml,
	"js/about.js":                   jsAboutJs,
	"js/admin.js":                   jsAdminJs,
	"js/first_run.js":               jsFirst_runJs,
	"js/index.js":                   jsIndexJs,
	"js/login.js":                   jsLoginJs,
	"js/profile.js":                 jsProfileJs,
	"js/profile_edit.js":            jsProfile_editJs,
	"js/signup.js":                  jsSignupJs,
	"js/vue.js":                     jsVueJs,
	"login.template.html":           loginTemplateHtml,
	"not_found.template.html":       not_foundTemplateHtml,
	"partials/header.template.html": partialsHeaderTemplateHtml,
	"partials/nav.template.html":    partialsNavTemplateHtml,
	"profile.template.html":         profileTemplateHtml,
	"profile_edit.template.html":    profile_editTemplateHtml,
	"signup.template.html":          signupTemplateHtml,
	"app/bad_passwords.txt":         appBad_passwordsTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"about.template.html": {aboutTemplateHtml, map[string]*bintree{}},
	"admin.template.html": {adminTemplateHtml, map[string]*bintree{}},
	"app": {nil, map[string]*bintree{
		"bad_passwords.txt": {appBad_passwordsTxt, map[string]*bintree{}},
	}},
	"css": {nil, map[string]*bintree{
		"lex.css": {cssLexCss, map[string]*bintree{}},
		"mixins": {nil, map[string]*bintree{
			"blur.css": {cssMixinsBlurCss, map[string]*bintree{}},
		}},
	}},
	"error.template.html": {errorTemplateHtml, map[string]*bintree{}},
	"first_run.template.html": {first_runTemplateHtml, map[string]*bintree{}},
	"images": {nil, map[string]*bintree{
		"favicon.png": {imagesFaviconPng, map[string]*bintree{}},
	}},
	"index.template.html": {indexTemplateHtml, map[string]*bintree{}},
	"js": {nil, map[string]*bintree{
		"about.js": {jsAboutJs, map[string]*bintree{}},
		"admin.js": {jsAdminJs, map[string]*bintree{}},
		"first_run.js": {jsFirst_runJs, map[string]*bintree{}},
		"index.js": {jsIndexJs, map[string]*bintree{}},
		"login.js": {jsLoginJs, map[string]*bintree{}},
		"profile.js": {jsProfileJs, map[string]*bintree{}},
		"profile_edit.js": {jsProfile_editJs, map[string]*bintree{}},
		"signup.js": {jsSignupJs, map[string]*bintree{}},
		"vue.js": {jsVueJs, map[string]*bintree{}},
	}},
	"login.template.html": {loginTemplateHtml, map[string]*bintree{}},
	"not_found.template.html": {not_foundTemplateHtml, map[string]*bintree{}},
	"partials": {nil, map[string]*bintree{
		"header.template.html": {partialsHeaderTemplateHtml, map[string]*bintree{}},
		"nav.template.html": {partialsNavTemplateHtml, map[string]*bintree{}},
	}},
	"profile.template.html": {profileTemplateHtml, map[string]*bintree{}},
	"profile_edit.template.html": {profile_editTemplateHtml, map[string]*bintree{}},
	"signup.template.html": {signupTemplateHtml, map[string]*bintree{}},
	"version": {version, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
